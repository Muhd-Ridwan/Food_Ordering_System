package FoodOrderingSystem;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class RevenueDashboard extends javax.swing.JFrame {

    /**
     * Creates new form Earning
     */
    
    private String runnerId;
    
    public RevenueDashboard() {
        initComponents();
    }
    
    public RevenueDashboard(String RunnerID){
        initComponents();
        this.runnerId = RunnerID;
    }
    
    private void loadCompletedOrders(String runnerID) {
        String filename = "Order Status.txt"; // Ensure the file exists
        DefaultTableModel model = (DefaultTableModel) EarningsTable.getModel();
        model.setRowCount(0); // Clear existing data

        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(";");

                // Ensure data length is correct and check conditions
                if (data.length >= 12) {
                    String assignedRunner = data[2];  // Runner ID is in column index 2
                    String status = data[11];  // Status is in column index 10

                    if (runnerID.equalsIgnoreCase(assignedRunner) && status.equalsIgnoreCase("Completed")) {
                        String orderID = data[0];  // Order ID
                        String year = data[4];     // Year
                        String month = data[5];    // Month
                        String day = data[6];      // Day
                        String deliveryFee = data[9]; // Delivery Fee

                        model.addRow(new Object[]{orderID, year, month, day, deliveryFee});
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error loading file: " + e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void sortTableByDate() {
        DefaultTableModel model = (DefaultTableModel) EarningsTable.getModel();
        int rowCount = model.getRowCount();

        if (rowCount == 0) {
            JOptionPane.showMessageDialog(null, "No data to search!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String yearInput = Yeartxt.getText().trim();
        String monthInput = Monthtxt.getText().trim();
        String dayInput = Daytxt.getText().trim();

        // Convert table data into a list for filtering
        List<String[]> filteredData = new ArrayList<>();
        for (int i = 0; i < rowCount; i++) {
            String[] row = new String[model.getColumnCount()];
            for (int j = 0; j < model.getColumnCount(); j++) {
                row[j] = (String) model.getValueAt(i, j);
            }

            boolean matchesYear = yearInput.isEmpty() || row[1].equals(yearInput);
            boolean matchesMonth = monthInput.isEmpty() || row[2].equals(monthInput);
            boolean matchesDay = dayInput.isEmpty() || row[3].equals(dayInput);

            // Add the row if it matches any entered criteria
            if (matchesYear && matchesMonth && matchesDay) {
                filteredData.add(row);
            }
        }

        // Sort by Year, Month, and Day if applicable
        filteredData.sort(Comparator.comparing((String[] row) -> Integer.parseInt(row[1])) // Year
                                    .thenComparing(row -> Integer.parseInt(row[2]))       // Month
                                    .thenComparing(row -> Integer.parseInt(row[3])));     // Day

        // Clear table and reload filtered data
        model.setRowCount(0);
        for (String[] row : filteredData) {
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        EarningsTable = new javax.swing.JTable();
        Homepage = new javax.swing.JButton();
        Searchbutton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Yeartxt = new javax.swing.JTextField();
        Refreshbutton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Monthtxt = new javax.swing.JTextField();
        Daytxt = new javax.swing.JTextField();
        CloseBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Revenue Dashboard");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jLabel1.setText("Revenue Dashboard");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, 60));

        EarningsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "DRID", "Year", "Month", "Day", "Delivery Fee"
            }
        ));
        jScrollPane1.setViewportView(EarningsTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 72, 538, 324));

        Homepage.setText("Homepage");
        Homepage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomepageActionPerformed(evt);
            }
        });
        getContentPane().add(Homepage, new org.netbeans.lib.awtextra.AbsoluteConstraints(382, 24, -1, -1));

        Searchbutton.setText("Search");
        Searchbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchbuttonActionPerformed(evt);
            }
        });
        getContentPane().add(Searchbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 317, -1, -1));

        jLabel2.setText("Year:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 80, -1, -1));
        getContentPane().add(Yeartxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(644, 77, 80, 30));

        Refreshbutton.setText("Refresh");
        Refreshbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshbuttonActionPerformed(evt);
            }
        });
        getContentPane().add(Refreshbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(652, 317, -1, -1));

        jLabel3.setText("Month:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 167, -1, -1));

        jLabel4.setText("Day:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 251, -1, -1));
        getContentPane().add(Monthtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(644, 164, 80, 30));
        getContentPane().add(Daytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(644, 245, 80, 30));

        CloseBtn.setText("Close");
        CloseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseBtnActionPerformed(evt);
            }
        });
        getContentPane().add(CloseBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 390, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HomepageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomepageActionPerformed
        new HomepageRunner().setVisible(true);
    }//GEN-LAST:event_HomepageActionPerformed

    private void RefreshbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshbuttonActionPerformed
        loadCompletedOrders(this.runnerId);
    }//GEN-LAST:event_RefreshbuttonActionPerformed

    private void SearchbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchbuttonActionPerformed
        sortTableByDate();
    }//GEN-LAST:event_SearchbuttonActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        this.setLocationRelativeTo(null);
    }//GEN-LAST:event_formWindowActivated

    private void CloseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseBtnActionPerformed
        HomepageRunner HR = new HomepageRunner(this.runnerId);
        this.setVisible(false);
        HR.setVisible(true);
    }//GEN-LAST:event_CloseBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RevenueDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RevenueDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RevenueDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RevenueDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RevenueDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CloseBtn;
    private javax.swing.JTextField Daytxt;
    private javax.swing.JTable EarningsTable;
    private javax.swing.JButton Homepage;
    private javax.swing.JTextField Monthtxt;
    private javax.swing.JButton Refreshbutton;
    private javax.swing.JButton Searchbutton;
    private javax.swing.JTextField Yeartxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
