package FoodOrderingSystem;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class OrderStatusVendor extends javax.swing.JFrame {
    private String orderId;
    private String vendorId;
    private String customerId;
    private String drid;
    private String amount;
    private String deliveryFee;
    private String status;
    private String remarks;
    private Double newTotalAmountCust;
    private String customerCredit;
    private String vendorCredits;
    private Double newTotalAmountVendor;
    
    // DATE
    LocalDate currentDate = LocalDate.now();
    int day = currentDate.getDayOfMonth();
    int month = currentDate.getMonthValue();
    int year = currentDate.getYear();
    DateTimeFormatter formatDate = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    String formattedDate = currentDate.format(formatDate);

    // TIME
    LocalTime currentTime = LocalTime.now();
    DateTimeFormatter formatTime = DateTimeFormatter.ofPattern("HH:mm:ss a");
    String formattedTime = currentTime.format(formatTime);
    
    /**
     * Creates new form OrderStatus1
     */
    public OrderStatusVendor() {
        addRowSelectionListener();
        initComponents();
    }
    
    public OrderStatusVendor(String VendorId){
        initComponents();
        this.vendorId = VendorId;
        addRowSelectionListener();
        refreshData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrderStat = new javax.swing.JTable();
        UpdateStatBtn = new javax.swing.JButton();
        CancelBtn = new javax.swing.JButton();
        CloseBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Order Status");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Order Status");

        OrderStat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "OrderID", "VendorID", "DRID", "Customer ID", "Year", "Month", "Day", "Items", "Amount(RM)", "DeliveryFees", "Status", "Remarks"
            }
        ));
        jScrollPane1.setViewportView(OrderStat);
        if (OrderStat.getColumnModel().getColumnCount() > 0) {
            OrderStat.getColumnModel().getColumn(3).setPreferredWidth(150);
            OrderStat.getColumnModel().getColumn(8).setPreferredWidth(150);
            OrderStat.getColumnModel().getColumn(9).setPreferredWidth(150);
        }

        UpdateStatBtn.setText("Update Status");
        UpdateStatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateStatBtnActionPerformed(evt);
            }
        });

        CancelBtn.setText("Cancel Order");
        CancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBtnActionPerformed(evt);
            }
        });

        CloseBtn.setText("Close");
        CloseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UpdateStatBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CancelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 603, Short.MAX_VALUE)
                        .addComponent(CloseBtn))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 874, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UpdateStatBtn)
                    .addComponent(CancelBtn)
                    .addComponent(CloseBtn))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UpdateStatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateStatBtnActionPerformed
        if(updateStatDelivering()){
            JOptionPane.showMessageDialog(this, "Order have been pickup by runner", "System", JOptionPane.INFORMATION_MESSAGE);
        }else if(updateStatCompleted()){
            JOptionPane.showMessageDialog(this, "Customer has pickup the order.", "System", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(this, "There's an error for this system.", "Please proceed with customer order as usual" , JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_UpdateStatBtnActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        this.setLocationRelativeTo(null);
        readCustomerCredit();
        readVendorCredit();
//        this.newTotalAmountCust = Math.round((Double.parseDouble(this.customerCredit)) + (Double.parseDouble(this.deliveryFee) + Double.parseDouble(this.amount)) * 100.0) / 100.0;
//        this.newTotalAmountVendor = Math.round((Double.parseDouble(this.vendorCredits) - Double.parseDouble(this.amount)) * 100.0) / 100.0;
    }//GEN-LAST:event_formWindowActivated

    private void CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBtnActionPerformed
        double currentCredit = Double.parseDouble(this.customerCredit.trim());
        double refundAmount = Double.parseDouble(this.deliveryFee.trim() + Double.parseDouble(this.amount.trim()));

        //CHANGING CRED AMOUNT
        this.newTotalAmountCust = Math.round((currentCredit + refundAmount) * 100.0) / 100.0;
        System.out.println("Customer Credit NEW: " + this.newTotalAmountCust);

        double currentVendorCredit = Double.parseDouble(this.vendorCredits.trim());
        this.newTotalAmountVendor = Math.round((currentVendorCredit - Double.parseDouble(this.amount.trim())) * 100.0) / 100.0;
        System.out.println("Total Credit Vendor NEW: " + this.newTotalAmountVendor);
        
        boolean custUpdated = changeCustCred(this.newTotalAmountCust);
        boolean vendorUpdated = changeVendorCred(this.newTotalAmountVendor);
        
        addDataToTxtVend(Double.parseDouble(this.amount.trim()));
        addDataToTxnCust(Double.parseDouble(this.amount.trim()));
        
        if(custUpdated && vendorUpdated){
                System.out.println("New Customer Credit: " + this.newTotalAmountCust);
                System.out.println("New Vendor Credit: " + this.newTotalAmountVendor);
                JOptionPane.showMessageDialog(this, "Your order has been canceled", "System", JOptionPane.INFORMATION_MESSAGE);
        }else{
                JOptionPane.showMessageDialog(this, "Failed in update credit amount", "System", JOptionPane.ERROR_MESSAGE);
        }
        
        if(cancelOrderCust()){
            JOptionPane.showMessageDialog(this, "Order has been cancelled", "System", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(this, "Failed in updating customer & vendor amount after cancel.", "System", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CancelBtnActionPerformed

    private void CloseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseBtnActionPerformed
        VendorHome VH = new VendorHome(this.vendorId);
        VH.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_CloseBtnActionPerformed
    
    private void addDataToTxtVend(double Amount){
        try(BufferedReader br = new BufferedReader(new FileReader("Transaction.txt"))){
            String line;
            int rowCount = 0;
            
            while((line = br.readLine()) != null){
                rowCount++;
            }
            
            String tempTxnId = "TXN" + String.format("%03d", rowCount +1);
            
            FileWriter fw = new FileWriter("Transaction.txt", true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);
            pw.write(
                    tempTxnId + ";" +
                    this.vendorId + ";" +
                    formattedDate + ";" +
                    formattedTime + ";" +
                    Amount + ";" +
                    "Debit" + "\n"
            );
            pw.close();
            bw.close();
            fw.close();
            
        }catch(IOException e){
            System.out.println("Error in uploading transaction for venmdor.");
        }
    }

    private void addDataToTxnCust(double Amount){
        
        try{
            FileReader fr = new FileReader("Transaction.txt");
            BufferedReader br = new BufferedReader(fr);
            String line;
            int rowCount = 0;
            
            while((line = br.readLine()) != null){
                rowCount++;
            }
            br.close();
            
            String TXNIDS = "TXN" + String.format("%03d", rowCount + 1);
                
            FileWriter fw = new FileWriter("Transaction.txt", true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);
            pw.write(
                    TXNIDS + ";" +
                    this.customerId + ";" +                        
                    formattedDate + ";" +
                    formattedTime + ";" +
                    Amount + ";" +
                    "Credit" + "\n"
            );
            pw.close();
            bw.close();
            fw.close();
            
        }catch(IOException e){
            JOptionPane.showMessageDialog(this, "506 There's an error occured in adding your transaction history. Your money has not been credited to your account. Please contact administrator for this error.", "System", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void readVendorCredit(){
        try(BufferedReader br = new BufferedReader(new FileReader("vendor.txt"))){
            String read;
            
            while((read = br.readLine()) != null){
                String[] data = read.split(";");
                
                String tempVenId = data[0];
                
                if(this.vendorId.equalsIgnoreCase(tempVenId)){
                    this.vendorCredits = data[3].trim();
                }
            }
            System.out.println("Vendor amount" + this.vendorCredits);
        }catch(IOException e){
            System.out.println("Error reading vendor profile.");
        }
    }
    
    private void readCustomerCredit(){
       try(BufferedReader br = new BufferedReader(new FileReader("Customer Profile.txt"))){
            String read;
            
            while((read = br.readLine()) != null){
                String[] data = read.split(";");
                
                String tempCustId = data[0];
                
                if(this.customerId.equalsIgnoreCase(tempCustId)){
                    this.customerCredit = data[7].trim();
                    System.out.println("Customer credit in read Method: " + this.customerCredit);
                    break;
                }
            }
        }catch(IOException e){
            System.out.println("Error in reading customer profile.");
        }
    }
    
    //EDITING VENDOR CREDIT AMOUNT IF VENDOR CANCEL IT
    private boolean changeVendorCred(double Amount){
         File inputFile = new File("vendor.txt");
        File tempFile = new File("vendor_temp.txt");
        boolean isUpdated = false;
        
        try(BufferedReader br = new BufferedReader(new FileReader(inputFile));
            BufferedWriter bw = new BufferedWriter(new FileWriter(tempFile))){
            
            
            String line;
            while ((line = br.readLine()) != null){
                String[] data = line.split(";");
                
                if(data.length >= 4 && data[0].equalsIgnoreCase(this.vendorId)){
                    data[3] = String.valueOf(Amount);
                    isUpdated = true;
                }
                
                bw.write(String.join(";", data));
                bw.newLine();
            }
        }catch(IOException e){
            return false;
        }
        
        if(isUpdated){
            if(!inputFile.delete() || !tempFile.renameTo(inputFile)){
                System.out.println("Error updating vendor cred amnt.");
                return false;
            }
        }else{
            tempFile.delete();
        }
        return isUpdated;
    }
    
    //EDITING CUSTOMER CREDIT IF VENDOR CANCEL IT
    private boolean changeCustCred(double Amount){
        File inputFile = new File("Customer Profile.txt");
        File tempFile = new File("Customer_temp.txt");
        boolean isUpdated = false;
        
        try(BufferedReader br = new BufferedReader(new FileReader(inputFile));
            BufferedWriter bw = new BufferedWriter(new FileWriter(tempFile))){
            
            String line;
            
            while((line = br.readLine()) != null){
                String[] data = line.split(";");
                
                if(data.length >= 8 && data[0].equalsIgnoreCase(this.customerId)){
                    data[7] = String.valueOf(Amount);
                    isUpdated = true;
                }
                bw.write(String.join(";", data));
                bw.newLine();
            }

        }catch(IOException e){
            return false;
        }
        
        if(isUpdated){
            if(!inputFile.delete() || !tempFile.renameTo(inputFile)){
                System.out.println("Error update customer credit.");
                return false;
            }
        }else{
            tempFile.delete();
        }
        return isUpdated;
    }
    
    
    
    // VENDOR CANCEL ORDER
    private boolean cancelOrderCust(){
        File inputFile = new File("Order Status.txt");
        File tempFile = new File("Temp_Order_Status.txt");
        boolean isUpdated = false;
        
         try(BufferedReader br = new BufferedReader(new FileReader(inputFile));
             BufferedWriter bw = new BufferedWriter(new FileWriter(tempFile))){
            String read;
            
            while((read = br.readLine()) != null){
                String[] data = read.split(";");
                
               if(data.length >= 12 && data[0].equalsIgnoreCase(this.orderId)){
                   data[11] = String.valueOf("Cancelled");
                   isUpdated = true;
               } 
               bw.write(String.join(";", data));
               bw.newLine();
            }                     
        }catch(IOException e){
            System.out.println("Error update order status");
            return false;
        }
         
        if(isUpdated){
            if(!inputFile.delete() || !tempFile.renameTo(inputFile)){
                System.out.println("Failed to update order status.");
                return false;
            }
        }else{
            tempFile.delete();
        }
        return isUpdated;
    }
    
    // FOR CUSTOMER CHOOSE DINE IN OR TA
    private boolean updateStatCompleted(){
        try(BufferedReader br = new BufferedReader(new FileReader("Order Status.txt"))){
            String read;
            List<String> allData = new ArrayList<>();
            
            while((read = br.readLine()) != null){
                String[] data = read.split(";");
                
               if(data.length == 12 && data[0].equalsIgnoreCase(this.orderId) && data[2] == null){
                   data[11] = String.valueOf("Completed");
               } 
               
               allData.add(String.join(";", data));                
            }
            
            BufferedWriter bw = new BufferedWriter(new FileWriter("Order Status.txt"));
            for(String updatedLine : allData){
                bw.write(updatedLine);
                bw.newLine();
            }
            bw.close();
            return true;
        }catch(IOException e){
            return false;
        }
    }
    
    // FOR CUSTOMER CHOOSING DELIVERY
    private boolean updateStatDelivering(){
        try(BufferedReader br = new BufferedReader(new FileReader("Order Status.txt"))){
            String read;
            List<String> allData = new ArrayList<>();
            
            while((read = br.readLine()) != null){
                String[] data = read.split(";");
                
               if(data.length == 12 && data[0].equalsIgnoreCase(this.orderId) && data[2] != null){
                   data[11] = String.valueOf("Delivering");
               } 
               
               allData.add(String.join(";", data));                
            }
            
            BufferedWriter bw = new BufferedWriter(new FileWriter("Order Status.txt"));
            for(String updatedLine : allData){
                bw.write(updatedLine);
                bw.newLine();
            }
            bw.close();
            return true;
        }catch(IOException e){
            return false;
        }
    }
    
    public void refreshData(){
        try{
            String read;
            FileReader fr = new FileReader("Order Status.txt");
            
            // Prevent Glitch from file use BufferedReader
            BufferedReader br = new BufferedReader(fr);
            
               
            // To start use the JTable use DefaultTableModel
            DefaultTableModel model = (DefaultTableModel) OrderStat.getModel();
            model.setRowCount(0);
            
            while((read = br.readLine()) != null ){
                String[] data = read.split(";");


                this.orderId = read.split(";")[0];
                String tempVenId = read.split(";")[1];
                this.drid = read.split(";")[2];
                String tempCustId = read.split(";")[3];
                String year = data[4];
                String month = data[5];
                String day = data[6];
                String foodName = data[7];
                this.amount = read.split(";")[8];
                this.deliveryFee = read.split(";")[9];
                this.status = read.split(";")[11];
                this.remarks = read.split(";")[12];

                //EXTRACTING CART TEXT WITH SAME CUSTOMER ID
                if(this.vendorId.equalsIgnoreCase(tempVenId) && this.status.equalsIgnoreCase("Preparing")){
                    // ADD DATA FROM FILE INTO TABLE
                    model.addRow(new Object[]{
                        this.orderId, this.vendorId, this.drid, tempCustId, year, month, day, foodName, this.amount, this.deliveryFee, this.status, this.remarks
                    });
                }                    
            }
            br.close();
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, e, "System", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    private void addRowSelectionListener(){
        OrderStat.getSelectionModel().addListSelectionListener((ListSelectionEvent e)->{
            if(!e.getValueIsAdjusting()){
                int selectedRow = OrderStat.getSelectedRow();
                if(selectedRow != -1) {
                    String orderID = (String) OrderStat.getValueAt(selectedRow,0);
                    this.customerId = (String) OrderStat.getValueAt(selectedRow, 3);
                    System.out.println("Order ID: " + orderID);
                    System.out.println("Customer ID: " + this.customerId);
                }
            }
        });
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderStatusVendor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderStatusVendor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderStatusVendor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderStatusVendor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderStatusVendor().setVisible(true);
            }
        });
    }
    
//    private void addOrderHistoryTxtIfCancel(){
//        try{
//            String read;
//            FileReader fr = new FileReader("Order History.txt");
//            BufferedReader br = new BufferedReader(fr);
//            
//            while((read = br.readLine()) != null){
//                String[] data = read.split(";");
//            }
//        }catch(IOException e){
//            
//        }
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelBtn;
    private javax.swing.JButton CloseBtn;
    private javax.swing.JTable OrderStat;
    private javax.swing.JButton UpdateStatBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
